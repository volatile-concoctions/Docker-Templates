[tls.options]
  [tls.options.default]
    minVersion = "VersionTLS12"
    ###
	# TLS Parameters:
	# VersionTLS10 = 0x0301
	# VersionTLS11 = 0x0302
	# VersionTLS12 = 0x0303
	# VersionTLS13 = 0x0304
	###
	cipherSuites = [
	  "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
          "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
          "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
          "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
          "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305"
          "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
          "TLS_AES_128_GCM_SHA256"
          "TLS_AES_256_GCM_SHA384"
          "TLS_CHACHA20_POLY1305_SHA256"
          "TLS_FALLBACK_SCSV"
          ]
    ###
	# TLS cipher suites:
	# TLS 1.0 - 1.2 cipher suites.
	# TLS_RSA_WITH_RC4_128_SHA                      uint16 = 0x0005
	# TLS_RSA_WITH_3DES_EDE_CBC_SHA                 uint16 = 0x000a
	# TLS_RSA_WITH_AES_128_CBC_SHA                  uint16 = 0x002f
	# TLS_RSA_WITH_AES_256_CBC_SHA                  uint16 = 0x0035
	# TLS_RSA_WITH_AES_128_CBC_SHA256               uint16 = 0x003c
	# TLS_RSA_WITH_AES_128_GCM_SHA256               uint16 = 0x009c
	# TLS_RSA_WITH_AES_256_GCM_SHA384               uint16 = 0x009d
	# TLS_ECDHE_ECDSA_WITH_RC4_128_SHA              uint16 = 0xc007
	# TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA          uint16 = 0xc009
	# TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA          uint16 = 0xc00a
	# TLS_ECDHE_RSA_WITH_RC4_128_SHA                uint16 = 0xc011
	# TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA           uint16 = 0xc012
	# TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA            uint16 = 0xc013
	# TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA            uint16 = 0xc014
	# TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256       uint16 = 0xc023
	# TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256         uint16 = 0xc027
	# TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256         uint16 = 0xc02f
	# TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256       uint16 = 0xc02b
	# TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384         uint16 = 0xc030
	# TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384       uint16 = 0xc02c
	# TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   uint16 = 0xcca8
	# TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xcca9
    ###
	# TLS 1.3 cipher suites.
	# TLS_AES_128_GCM_SHA256       uint16 = 0x1301
	# TLS_AES_256_GCM_SHA384       uint16 = 0x1302
	# TLS_CHACHA20_POLY1305_SHA256 uint16 = 0x1303
    # TLS_FALLBACK_SCSV isn't a standard cipher suite but an indicator that the client is doing version fallback. See RFC 7507.
	# TLS_FALLBACK_SCSV uint16 = 0x5600
    ###
	# Legacy names for the corresponding cipher suites with the correct _SHA256 suffix, retained for backward compatibility.
	# TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305   = TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
	# TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
	###
	curvePreferences = ["CurveP521", "CurveP384"]
	###
	# This option allows to set the preferred CurveIDs in a specific order.
	# CurveIDs are the type of a TLS identifier for an elliptic curve
	# The names of the curves defined by crypto (e.g. CurveP521) and the RFC defined names (e. g. secp521r1) can be used.
	# For more info see: https://godoc.org/crypto/tls#CurveID
	###
	sniStrict = true
	###
	# With strict SNI checking enabled, Traefik won't allow connections from clients that do not 
	# specify a server_name extension or don't match any certificate configured on the tlsOption.
	###
  
  [tls.options.default.clientAuth]
	caFiles = ["tests/clientca1.crt", "tests/clientca2.crt"]
    ###
	# in PEM format. each file can contain multiple CAs.
	# on CentOS the default CA store is /etc/pki/ca-trust/source/anchors/
	# Make sure you have your Docker-Compose file point to the right place
    ###
	clientAuthType = "RequireAndVerifyClientCert"
	###
	# The clientAuth.clientAuthType option governs the behaviour as follows:
    # NoClientCert: disregards any client certificate.
    # RequestClientCert: asks for a certificate but proceeds anyway if none is provided.
    # RequireAnyClientCert: requires a certificate but does not verify if it is signed by a CA listed in clientAuth.caFiles.
    # VerifyClientCertIfGiven: if a certificate is provided, verifies if it is signed by a CA listed in clientAuth.caFiles. Otherwise proceeds without any certificate.
    # RequireAndVerifyClientCert: requires a certificate, which must be signed by a CA listed in clientAuth.caFiles.
	###

[[tls.certificates]]
  ###
  # Note that since no store is defined,
  # the certificates below will be stored in the `default` store.
  ###
  certFile = "/path/to/other-domain.cert"
  keyFile = "/path/to/other-domain.key"
  
 
